#! /usr/bin/env python3

# -----------------------------------------------------------------------------
# senzing-environment.py
# -----------------------------------------------------------------------------

import argparse
import configparser
import json
import linecache
import logging
import os
import re
import shutil
import signal
import socket
import stat
import string
import sys
import time
from urllib.parse import urlparse, urlunparse

__all__ = []
__version__ = "1.4.1"  # See https://www.python.org/dev/peps/pep-0396/
__date__ = '2020-04-23'
__updated__ = '2022-09-29'

SENZING_PRODUCT_ID = "5015"  # See https://github.com/Senzing/knowledge-base/blob/main/lists/senzing-product-ids.md
log_format = '%(asctime)s %(message)s'

# Lists from https://www.ietf.org/rfc/rfc1738.txt

safe_character_list = ['$', '-', '_', '.', '+', '!', '*', '(', ')', ',', '"'] + list(string.ascii_letters)
unsafe_character_list = ['"', '<', '>', '#', '%', '{', '}', '|', '\\', '^', '~', '[', ']', '`']
reserved_character_list = [';', ',', '/', '?', ':', '@', '=', '&']

# The "configuration_locator" describes where configuration variables are in:
# 1) Command line options, 2) Environment variables, 3) Configuration files, 4) Default values

configuration_locator = {
    "debug": {
        "default": False,
        "env": "SENZING_DEBUG",
        "cli": "debug"
    },
    "docker_host_ip_addr": {
        "default": None,
        "env": "SENZING_DOCKER_HOST_IP_ADDR",
        "cli": "docker-host-ip-addr"
    },
    "g2_database_url": {
        "default": "sqlite3://na:na@/var/opt/senzing/sqlite/G2C.db",
        "env": "SENZING_DATABASE_URL",
        "cli": "database-url"
    },
    "project_name": {
        "default": "senzing",
        "env": "SENZING_PROJECT_NAME",
        "cli": "project-name"
    },
    "project_dir": {
        "default": "~/senzing",
        "env": "SENZING_PROJECT_DIR",
        "cli": "project-dir"
    },
    "sleep_time_in_seconds": {
        "default": 0,
        "env": "SENZING_SLEEP_TIME_IN_SECONDS",
        "cli": "sleep-time-in-seconds"
    },
    "sql_connection": {
        "default": None,
        "env": "SENZING_SQL_CONNECTION",
        "cli": "sql-connection"
    },
    "subcommand": {
        "default": None,
        "env": "SENZING_SUBCOMMAND",
    }
}

# Enumerate keys in 'configuration_locator' that should not be printed to the log.

keys_to_redact = [
    "password",
    "sql_connection",
]

report_warnings = []
report_errors = []

# -----------------------------------------------------------------------------
# Define argument parser
# -----------------------------------------------------------------------------


def get_parser():
    ''' Parse commandline arguments. '''

    subcommands = {
        'add-docker-support-linux': {
            "help": 'Update a G2Project to support quickstart.',
            "argument_aspects": ["support"],
            "arguments": {
                "--sql-connection": {
                    "dest": "sql_connection",
                    "help": "Override SQL > CONNECTION in G2Module.ini",
                    "metavar": "SENZING_SQL_CONNECTION",
                },
            },
        },
        'add-docker-support-macos': {
            "help": 'Create a stand-aolne project.',
            "argument_aspects": ["support"],
        },
        'docker-host': {
            "help": 'Show information on docker host.',
            "arguments": {
                "--debug": {
                    "action": "store_true",
                    "dest": "debug",
                    "help": "Enable debugging. (SENZING_DEBUG) Default: False"
                },
            },
        },
        'sleep': {
            "help": 'Do nothing but sleep. For Docker testing.',
            "arguments": {
                "--sleep-time-in-seconds": {
                    "dest": "sleep_time_in_seconds",
                    "help": "Sleep time in seconds. DEFAULT: 0 (infinite)",
                    "metavar": "SENZING_SLEEP_TIME_IN_SECONDS",
                },
            },
        },
        'version': {
            "help": 'Print version of program.',
        },
        'docker-acceptance-test': {
            "help": 'For Docker acceptance testing.',
        },
    }

    # Define argument_aspects.

    argument_aspects = {
        "support": {
            "--debug": {
                "dest": "debug",
                "action": "store_true",
                "help": "Enable debugging. (SENZING_DEBUG) Default: False"
            },
            "--docker-host-ip-addr": {
                "dest": "docker_host_ip_addr",
                "help": "IP address of machine hosting docker containers. Default: <auto-generated>",
                "metavar": "SENZING_DOCKER_HOST_IP_ADDR"
            },
            "--project-name": {
                "dest": "project_name",
                "help": "A name for the project used as a prefix for artifacts. Default: senzing",
                "metavar": "SENZING_PROJECT_NAME"
            },
            "--project-dir": {
                "dest": "project_dir",
                "help": "Specify location of G2Project Default: ~/senzing",
                "metavar": "SENZING_PROJECT_DIR"
            },
        },
    }

    # Augment "subcommands" variable with arguments specified by aspects.

    for subcommand, subcommand_value in subcommands.items():
        if 'argument_aspects' in subcommand_value:
            for aspect in subcommand_value['argument_aspects']:
                if 'arguments' not in subcommands[subcommand]:
                    subcommands[subcommand]['arguments'] = {}
                arguments = argument_aspects.get(aspect, {})
                for argument, argument_value in arguments.items():
                    subcommands[subcommand]['arguments'][argument] = argument_value

    parser = argparse.ArgumentParser(description="Create scripts for running Senzing docker containers. For more information, see https://github.com/Senzing/senzing-environment")
    subparsers = parser.add_subparsers(dest='subcommand', help='Subcommands (SENZING_SUBCOMMAND):')

    for subcommand_key, subcommand_values in subcommands.items():
        subcommand_help = subcommand_values.get('help', "")
        subcommand_arguments = subcommand_values.get('arguments', {})
        subparser = subparsers.add_parser(subcommand_key, help=subcommand_help)
        for argument_key, argument_values in subcommand_arguments.items():
            subparser.add_argument(argument_key, **argument_values)

    return parser

# -----------------------------------------------------------------------------
# Message handling
# -----------------------------------------------------------------------------

# 1xx Informational (i.e. logging.info())
# 3xx Warning (i.e. logging.warning())
# 5xx User configuration issues (either logging.warning() or logging.err() for Client errors)
# 7xx Internal error (i.e. logging.error for Server errors)
# 9xx Debugging (i.e. logging.debug())


MESSAGE_INFO = 100
MESSAGE_WARN = 300
MESSAGE_ERROR = 700
MESSAGE_DEBUG = 900

message_dictionary = {
    "100": "senzing-" + SENZING_PRODUCT_ID + "{0:04d}I",
    "101": "------------------------------------------------------------------------------",
    "102": "{0} - Modifying...",
    "103": "   Changing {0}.{1} from {2} to {3}",
    "104": "   Keeping  {0}.{1} as {2}",
    "105": "   {0}.{1} doesn't exist",
    "106": "   Removed  {0}.{1}",
    "119": "{0} - Modified. {1}",
    "151": "{0} - Changing permissions from {1:o} to {2:o}",
    "152": "{0} - Changing owner from {1} to {2}",
    "153": "{0} - Changing group from {1} to {2}",
    "154": "{0} - Creating file by copying {1}",
    "155": "{0} - Deleting",
    "157": "{0} - Creating file",
    "158": "{0} - Creating symlink to {1}",
    "159": "{0} - Downloading from {1}",
    "160": "{0} - Copying {1} and modifying",
    "161": "{0} - Backup of current {1}",
    "162": "{0} - Creating directory",
    "163": "{0} - Already exists.  Left unmodified.",
    "164": "{0} - Copying {1}",
    "165": "{0} - Creating file",
    "170": "---- Environment variables ---------------------------------------------------",
    "171": "  {0} = {1}",
    "172": "  {0} defaults to {1}",
    "173": "  {0} is not set",
    "190": "---- File --------------------------------------------------------------------",
    "191": "---- Path on workstation: {0}",
    "192": "---- Path inside  docker: {0}",
    "193": "---- Contents:",
    "194": "{0}",
    "210": "---- G2Module.ini inspection -------------------------------------------------",
    "211": "G2Module.ini {0}.{1} has correct value for docker: {2}",
    "212": "G2Module.ini {0}.{1} has incorrect value for docker: {2} should be {3}",
    "213": "G2Module.ini {0}.{1} Not specified. If specified, it needs to be {2}",
    "350": "---- Warnings ----------------------------------------------------------------",
    "292": "Configuration change detected.  Old: {0} New: {1}",
    "293": "For information on warnings and errors, see https://github.com/Senzing/stream-loader#errors",
    "294": "Version: {0}  Updated: {1}",
    "295": "Sleeping infinitely.",
    "296": "Sleeping {0} seconds.",
    "297": "Enter {0}",
    "298": "Exit {0}",
    "299": "{0}",
    "300": "senzing-" + SENZING_PRODUCT_ID + "{0:04d}W",
    "350": "---- Warnings ----------------------------------------------------------------",
    "352": "Environment variable not set: {0}",
    "499": "{0}",
    "500": "senzing-" + SENZING_PRODUCT_ID + "{0:04d}E",
    "695": "Unknown database scheme '{0}' in database url '{1}'",
    "696": "Bad SENZING_SUBCOMMAND: {0}.",
    "697": "No processing done.",
    "698": "Program terminated with error.",
    "699": "{0}",
    "700": "senzing-" + SENZING_PRODUCT_ID + "{0:04d}E",
    "702": "Could not create '{0}' directory. Error: {1}",
    "750": "---- Errors ------------------------------------------------------------------",
    "760": "shutil.Error Cannot copy {0} to {1} Error: {2}",
    "761": "OSError: Cannot copy {0} to {1} Error: {2}",
    "885": "License has expired.",
    "886": "G2Engine.addRecord() bad return code: {0}; JSON: {1}",
    "888": "G2Engine.addRecord() G2ModuleNotInitialized: {0}; JSON: {1}",
    "889": "G2Engine.addRecord() G2ModuleGenericException: {0}; JSON: {1}",
    "890": "G2Engine.addRecord() Exception: {0}; JSON: {1}",
    "891": "Original and new database URLs do not match. Original URL: {0}; Reconstructed URL: {1}",
    "892": "Could not initialize G2Product with '{0}'. Error: {1}",
    "893": "Could not initialize G2Hasher with '{0}'. Error: {1}",
    "894": "Could not initialize G2Diagnostic with '{0}'. Error: {1}",
    "895": "Could not initialize G2Audit with '{0}'. Error: {1}",
    "896": "Could not initialize G2ConfigMgr with '{0}'. Error: {1}",
    "897": "Could not initialize G2Config with '{0}'. Error: {1}",
    "898": "Could not initialize G2Engine with '{0}'. Error: {1}",
    "899": "{0}",
    "900": "senzing-" + SENZING_PRODUCT_ID + "{0:04d}D",
    "998": "Debugging enabled.",
    "999": "{0}",
}


def message(index, *args):
    index_string = str(index)
    template = message_dictionary.get(index_string, "No message for index {0}.".format(index_string))
    return template.format(*args)


def message_generic(generic_index, index, *args):
    index_string = str(index)
    return "{0} {1}".format(message(generic_index, index), message(index, *args))


def message_info(index, *args):
    return message_generic(MESSAGE_INFO, index, *args)


def message_warning(index, *args):
    return message_generic(MESSAGE_WARN, index, *args)


def message_error(index, *args):
    return message_generic(MESSAGE_ERROR, index, *args)


def message_debug(index, *args):
    return message_generic(MESSAGE_DEBUG, index, *args)


def get_exception():
    ''' Get details about an exception. '''
    exception_type, exception_object, traceback = sys.exc_info()
    frame = traceback.tb_frame
    line_number = traceback.tb_lineno
    filename = frame.f_code.co_filename
    linecache.checkcache(filename)
    line = linecache.getline(filename, line_number, frame.f_globals)
    return {
        "filename": filename,
        "line_number": line_number,
        "line": line.strip(),
        "exception": exception_object,
        "type": exception_type,
        "traceback": traceback,
    }

# -----------------------------------------------------------------------------
# Configuration
# -----------------------------------------------------------------------------


def get_configuration(args):
    ''' Order of precedence: CLI, OS environment variables, INI file, default. '''
    result = {}

    # Copy default values into configuration dictionary.

    for key, value in list(configuration_locator.items()):
        result[key] = value.get('default', None)

    # "Prime the pump" with command line args. This will be done again as the last step.

    for key, value in list(args.__dict__.items()):
        new_key = key.format(subcommand.replace('-', '_'))
        if value:
            result[new_key] = value

    # Copy OS environment variables into configuration dictionary.

    for key, value in list(configuration_locator.items()):
        os_env_var = value.get('env', None)
        if os_env_var:
            os_env_value = os.getenv(os_env_var, None)
            if os_env_value:
                result[key] = os_env_value

    # Copy 'args' into configuration dictionary.

    for key, value in list(args.__dict__.items()):
        new_key = key.format(subcommand.replace('-', '_'))
        if value:
            result[new_key] = value

    # Add program information.

    result['program_version'] = __version__
    result['program_updated'] = __updated__

    # Special case: subcommand from command-line

    if args.subcommand:
        result['subcommand'] = args.subcommand

    # Special case: Change boolean strings to booleans.

    booleans = ['debug']
    for boolean in booleans:
        boolean_value = result.get(boolean)
        if isinstance(boolean_value, str):
            boolean_value_lower_case = boolean_value.lower()
            if boolean_value_lower_case in ['true', '1', 't', 'y', 'yes']:
                result[boolean] = True
            else:
                result[boolean] = False

    # Special case: Remove trailing /

    key = "project_dir"
    result[key] = os.path.abspath(result[key])

    # Special case: Host IP address

    if not result['docker_host_ip_addr']:
        my_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        my_socket.connect(("8.8.8.8", 80))
        result['docker_host_ip_addr'] = my_socket.getsockname()[0]
        my_socket.close()

    # Special case: Change integer strings to integers.

    integers = [
        'sleep_time_in_seconds'
    ]
    for integer in integers:
        integer_string = result.get(integer)
        result[integer] = int(integer_string)

    return result


def validate_configuration(config):
    ''' Check aggregate configuration from commandline options, environment variables, config files, and defaults. '''

    user_warning_messages = []
    user_error_messages = []

    # Perform subcommand specific checking.

    subcommand = config.get('subcommand')

    if subcommand in ['task1', 'task2']:

        if not config.get('senzing_dir'):
            user_error_messages.append(message_error(414))

    # Log warning messages.

    for user_warning_message in user_warning_messages:
        logging.warning(user_warning_message)

    # Log error messages.

    for user_error_message in user_error_messages:
        logging.error(user_error_message)

    # Log where to go for help.

    if len(user_warning_messages) > 0 or len(user_error_messages) > 0:
        logging.info(message_info(293))

    # If there are error messages, exit.

    if len(user_error_messages) > 0:
        exit_error(697)


def redact_configuration(config):
    ''' Return a shallow copy of config with certain keys removed. '''
    result = config.copy()
    for key in keys_to_redact:
        try:
            result.pop(key)
        except:
            pass
    return result

# -----------------------------------------------------------------------------
# Database URL parsing
# -----------------------------------------------------------------------------


database_connection_formats = {
    "db2": "{scheme}://{username}:{password}@{hostname}:{port}/{schema}",
    "mssql": "{scheme}://{username}:{password}@{schema}",
    "mysql": "{scheme}://{username}:{password}@{hostname}:{port}/?schema={schema}",
    "postgresql": "{scheme}://{username}:{password}@{hostname}:{port}:{schema}/",
    "sqlite3": "{scheme}://{username}:{password}@{path}",
}


def translate(map, astring):
    new_string = str(astring)
    for key, value in map.items():
        new_string = new_string.replace(key, value)
    return new_string


def get_unsafe_characters(astring):
    result = []
    for unsafe_character in unsafe_character_list:
        if unsafe_character in astring:
            result.append(unsafe_character)
    return result


def get_safe_characters(astring):
    result = []
    for safe_character in safe_character_list:
        if safe_character not in astring:
            result.append(safe_character)
    return result


def parse_database_url(original_senzing_database_url):
    ''' Given a canonical database URL, decompose into URL components. '''

    result = {}

    # Get the value of SENZING_DATABASE_URL environment variable.

    senzing_database_url = original_senzing_database_url

    # Create lists of safe and unsafe characters.

    unsafe_characters = get_unsafe_characters(senzing_database_url)
    safe_characters = get_safe_characters(senzing_database_url)

    # Detect an error condition where there are not enough safe characters.

    if len(unsafe_characters) > len(safe_characters):
        logging.error(message_error(730, unsafe_characters, safe_characters))
        return result

    # Perform translation.
    # This makes a map of safe character mapping to unsafe characters.
    # "senzing_database_url" is modified to have only safe characters.

    translation_map = {}
    safe_characters_index = 0
    for unsafe_character in unsafe_characters:
        safe_character = safe_characters[safe_characters_index]
        safe_characters_index += 1
        translation_map[safe_character] = unsafe_character
        senzing_database_url = senzing_database_url.replace(unsafe_character, safe_character)

    # Parse "translated" URL.

    parsed = urlparse(senzing_database_url)
    schema = parsed.path.strip('/')

    # Construct result.

    result = {
        'scheme': translate(translation_map, parsed.scheme),
        'netloc': translate(translation_map, parsed.netloc),
        'path': translate(translation_map, parsed.path),
        'params': translate(translation_map, parsed.params),
        'query': translate(translation_map, parsed.query),
        'fragment': translate(translation_map, parsed.fragment),
        'username': translate(translation_map, parsed.username),
        'password': translate(translation_map, parsed.password),
        'hostname': translate(translation_map, parsed.hostname),
        'port': translate(translation_map, parsed.port),
        'schema': translate(translation_map, schema),
    }

    # For safety, compare original URL with reconstructed URL.

    url_parts = [
        result.get('scheme'),
        result.get('netloc'),
        result.get('path'),
        result.get('params'),
        result.get('query'),
        result.get('fragment'),
    ]
    test_senzing_database_url = urlunparse(url_parts)
    if test_senzing_database_url != original_senzing_database_url:
        logging.warning(message_warning(891, original_senzing_database_url, test_senzing_database_url))

    # Return result.

    return result


def parse_string(format_string, string_to_be_parsed):
    """
    Match string_to_be_parsed against the given format string, return dictionary of matches.
    See https://stackoverflow.com/questions/10663093/use-python-format-string-in-reverse-for-parsing
    """

    # First split on any keyword arguments, note that the names of keyword arguments will be in the
    # 1st, 3rd, ... positions in this list

    tokens = re.split(r'\{(.*?)\}', format_string)
    keywords = tokens[1::2]

    # Now replace keyword arguments with named groups matching them. We also escape between keyword
    # arguments so we support meta-characters there. Re-join tokens to form our regexp pattern

    tokens[1::2] = map(u'(?P<{}>.*)'.format, keywords)
    tokens[0::2] = map(re.escape, tokens[0::2])
    pattern = ''.join(tokens)

    # Use our pattern to match the given string, raise if it doesn't match

    matches = re.match(pattern, string_to_be_parsed)
    if not matches:
        raise Exception("Format string did not match")

    # Return a dict with all of our keywords and their values

    return {x: matches.group(x) for x in keywords}


def parse_database_connection(senzing_database_connection):
    result = {}
    scheme = senzing_database_connection[:senzing_database_connection.index(":")]
    result = parse_string(database_connection_formats.get(scheme, ""), senzing_database_connection)
    if not result:
        logging.error(message_error(695, "", senzing_database_connection))

    assert type(result) == dict
    return result


def get_sql_connection(parsed_database_url):
    ''' Given a canonical database URL, transform to the specific URL. '''

    scheme = parsed_database_url.get('scheme')
    result = database_connection_formats.get(scheme, "").format(**parsed_database_url)
    if not result:
        logging.error(message_error(695, scheme, parsed_database_url))
    return result


def get_g2_database_url(parsed_database_connection):
    ''' Given a parsed database URL, transform to the normalized URL. '''

    result = ""
    scheme = parsed_database_connection.get('scheme')

    if scheme in ['mysql', 'postgresql', 'db2', 'mssql']:
        result = "{scheme}://{username}:{password}@{hostname}:{port}/{schema}".format(**parsed_database_connection)
    elif scheme in ['sqlite3']:
        result = "{scheme}://{username}:{password}@{path}".format(**parsed_database_connection)
    else:
        logging.error(message_error(695, scheme, parsed_database_connection))

    return result

# -----------------------------------------------------------------------------
# Utility functions
# -----------------------------------------------------------------------------


def bootstrap_signal_handler(signal, frame):
    sys.exit(0)


def create_signal_handler_function(args):
    ''' Tricky code.  Uses currying technique. Create a function for signal handling.
        that knows about "args".
    '''

    def result_function(signal_number, frame):
        logging.info(message_info(298, args))
        sys.exit(0)

    return result_function


def entry_template(config):
    ''' Format of entry message. '''
    debug = config.get("debug", False)
    config['start_time'] = time.time()
    if debug:
        final_config = config
    else:
        final_config = redact_configuration(config)
    config_json = json.dumps(final_config, sort_keys=True)
    return message_info(297, config_json)


def exit_template(config):
    ''' Format of exit message. '''
    debug = config.get("debug", False)
    stop_time = time.time()
    config['stop_time'] = stop_time
    config['elapsed_time'] = stop_time - config.get('start_time', stop_time)
    if debug:
        final_config = config
    else:
        final_config = redact_configuration(config)
    config_json = json.dumps(final_config, sort_keys=True)
    return message_info(298, config_json)


def exit_error(index, *args):
    ''' Log error message and exit program. '''
    logging.error(message_error(index, *args))
    logging.error(message_error(698))
    sys.exit(1)


def exit_silently():
    ''' Exit program. '''
    sys.exit(0)

# -----------------------------------------------------------------------------
# Files
# -----------------------------------------------------------------------------


def file_docker_environment_vars():
    """#! /usr/bin/env bash

# For more information about the environment variables, see
# https://github.com/Senzing/knowledge-base/blob/main/lists/environment-variables.md

# NOTE:  SENZING_DOCKER_HOST_IP_ADDR cannot be "localhost",
#        that would tell containers to look inside the container
#        rather than the host.
export SENZING_DOCKER_HOST_IP_ADDR={docker_host_ip_addr}
export SENZING_PROJECT_DIR={project_dir}
export SENZING_PROJECT_NAME={project_name}

export DATABASE_DATABASE={database_database}
export DATABASE_HOST={database_host}
export DATABASE_PASSWORD={database_password}
export DATABASE_PORT={database_port}
export DATABASE_PROTOCOL={database_protocol}
export DATABASE_USERNAME={database_username}
export POSTGRES_DIR=${{SENZING_PROJECT_DIR}}/var/postgres
export RABBITMQ_DIR=${{SENZING_PROJECT_DIR}}/var/rabbitmq
export SENZING_DATABASE_URL={senzing_database_url}
export SENZING_DATA_DIR=${{SENZING_PROJECT_DIR}}/data
export SENZING_DATA_VERSION_DIR=${{SENZING_PROJECT_DIR}}/data
export SENZING_DOCKER_CONTAINER_NAME_APT="${{SENZING_PROJECT_NAME}}-apt"
export SENZING_DOCKER_CONTAINER_NAME_DB2_DRIVER_INSTALLER="${{SENZING_PROJECT_NAME}}-db2-driver-installer"
export SENZING_DOCKER_CONTAINER_NAME_ENTITY_SEARCH_WEB_APP="${{SENZING_PROJECT_NAME}}-web-app"
export SENZING_DOCKER_CONTAINER_NAME_INIT_CONTAINER="${{SENZING_PROJECT_NAME}}-init-container"
export SENZING_DOCKER_CONTAINER_NAME_JUPYTER="${{SENZING_PROJECT_NAME}}-jupyter"
export SENZING_DOCKER_CONTAINER_NAME_MSSQL_DRIVER_INSTALLER="${{SENZING_PROJECT_NAME}}-mssql-driver-installer"
export SENZING_DOCKER_CONTAINER_NAME_PHPPGADMIN="${{SENZING_PROJECT_NAME}}-phppgadmin"
export SENZING_DOCKER_CONTAINER_NAME_PORTAINER="${{SENZING_PROJECT_NAME}}-portainer"
export SENZING_DOCKER_CONTAINER_NAME_POSTGRES="${{SENZING_PROJECT_NAME}}-postgres"
export SENZING_DOCKER_CONTAINER_NAME_POSTGRESQL_INIT="${{SENZING_PROJECT_NAME}}-postgresql-init"
export SENZING_DOCKER_CONTAINER_NAME_QUICKSTART="${{SENZING_PROJECT_NAME}}-quickstart"
export SENZING_DOCKER_CONTAINER_NAME_RABBITMQ="${{SENZING_PROJECT_NAME}}-rabbitmq"
export SENZING_DOCKER_CONTAINER_NAME_SENZING_API_SERVER="${{SENZING_PROJECT_NAME}}-api-server"
export SENZING_DOCKER_CONTAINER_NAME_SENZING_CONSOLE="${{SENZING_PROJECT_NAME}}-console"
export SENZING_DOCKER_CONTAINER_NAME_SENZING_DEBUG="${{SENZING_PROJECT_NAME}}-debug"
export SENZING_DOCKER_CONTAINER_NAME_SQLITE_WEB="${{SENZING_PROJECT_NAME}}-sqlite-web"
export SENZING_DOCKER_CONTAINER_NAME_SSHD="${{SENZING_PROJECT_NAME}}-sshd"
export SENZING_DOCKER_CONTAINER_NAME_STREAM_LOADER="${{SENZING_PROJECT_NAME}}-stream-loader"
export SENZING_DOCKER_CONTAINER_NAME_STREAM_PRODUCER="${{SENZING_PROJECT_NAME}}-stream-producer"
export SENZING_DOCKER_CONTAINER_NAME_SWAGGERAPI_SWAGGER_UI="${{SENZING_PROJECT_NAME}}-swagger-ui"
export SENZING_DOCKER_CONTAINER_NAME_WEB_APP_DEMO="${{SENZING_PROJECT_NAME}}-web-app-demo"
export SENZING_DOCKER_CONTAINER_NAME_XTERM="${{SENZING_PROJECT_NAME}}-xterm"
export SENZING_DOCKER_IMAGE_VERSION_APT=latest
export SENZING_DOCKER_IMAGE_VERSION_DB2_DRIVER_INSTALLER=latest
export SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP=latest
export SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER=latest
export SENZING_DOCKER_IMAGE_VERSION_JUPYTER=latest
export SENZING_DOCKER_IMAGE_VERSION_PHPPGADMIN=1.0.0
export SENZING_DOCKER_IMAGE_VERSION_PORTAINER=latest
export SENZING_DOCKER_IMAGE_VERSION_POSTGRES=11.6
export SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT=1.0.0
export SENZING_DOCKER_IMAGE_VERSION_RABBITMQ=3.8.2
export SENZING_DOCKER_IMAGE_VERSION_SENZING_API_SERVER=latest
export SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE=latest
export SENZING_DOCKER_IMAGE_VERSION_SENZING_DEBUG=latest
export SENZING_DOCKER_IMAGE_VERSION_SQLITE_WEB=latest
export SENZING_DOCKER_IMAGE_VERSION_SSHD=latest
export SENZING_DOCKER_IMAGE_VERSION_STREAM_LOADER=latest
export SENZING_DOCKER_IMAGE_VERSION_STREAM_PRODUCER=latest
export SENZING_DOCKER_IMAGE_VERSION_SWAGGERAPI_SWAGGER_UI=latest
export SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO=latest
export SENZING_DOCKER_IMAGE_VERSION_XTERM=latest
export SENZING_DOCKER_PORT_ENTITY_SEARCH_WEB_APP=8251
export SENZING_DOCKER_PORT_JUPYTER=9178
export SENZING_DOCKER_PORT_PHPPGADMIN_HTTP=9171
export SENZING_DOCKER_PORT_PHPPGADMIN_HTTPS=9172
export SENZING_DOCKER_PORT_PORTAINER=9170
export SENZING_DOCKER_PORT_POSTGRES=5432
export SENZING_DOCKER_PORT_RABBITMQ=5672
export SENZING_DOCKER_PORT_RABBITMQ_UI=15672
export SENZING_DOCKER_PORT_SENZING_API_SERVER=8250
export SENZING_DOCKER_PORT_SENZING_SQLITE_WEB=9174
export SENZING_DOCKER_PORT_SENZING_SWAGGERAPI_SWAGGER_UI=9180
export SENZING_DOCKER_PORT_SSHD=9181
export SENZING_DOCKER_PORT_XTERM=8254
export SENZING_DOCKER_REGISTRY_URL=docker.io
export SENZING_DOCKER_SOCKET=/var/run/docker.sock
export SENZING_ETC_DIR=${{SENZING_PROJECT_DIR}}/docker-etc
export SENZING_G2_DIR=${{SENZING_PROJECT_DIR}}{senzing_project_dir_suffix}
export SENZING_HORIZONTAL_RULE="=============================================================================="
export SENZING_INPUT_URL="https://s3.amazonaws.com/public-read-access/TestDataSets/loadtest-dataset-1M.json"
export SENZING_LOG_APT="${{SENZING_PROJECT_DIR}}/var/log/senzing-apt.log"
export SENZING_LOG_DB2_DRIVER_INSTALLER="${{SENZING_PROJECT_DIR}}/var/log/senzing-db2-driver-installer.log"
export SENZING_LOG_INIT_CONTAINER="${{SENZING_PROJECT_DIR}}/var/log/senzing-init-container.log"
export SENZING_LOG_JUPYTER="${{SENZING_PROJECT_DIR}}/var/log/senzing-jupyter.log"
export SENZING_LOG_MSSQL_DRIVER_INSTALLER="${{SENZING_PROJECT_DIR}}/var/log/senzing-mssql-driver-installer.log"
export SENZING_LOG_PHPPGADMIN="${{SENZING_PROJECT_DIR}}/var/log/senzing-phppgadmin.log"
export SENZING_LOG_PORTAINER="${{SENZING_PROJECT_DIR}}/var/log/portainer.log"
export SENZING_LOG_POSTGRES="${{SENZING_PROJECT_DIR}}/var/log/postgres.log"
export SENZING_LOG_POSTGRESQL_INIT="${{SENZING_PROJECT_DIR}}/var/log/senzing-postgresql-init.log"
export SENZING_LOG_QUICKSTART="${{SENZING_PROJECT_DIR}}/var/log/senzing-quickstart-demo.log"
export SENZING_LOG_RABBITMQ="${{SENZING_PROJECT_DIR}}/var/log/senzing-rabbitmq.log"
export SENZING_LOG_SENZING_API_SERVER="${{SENZING_PROJECT_DIR}}/var/log/senzing-api-server.log"
export SENZING_LOG_SENZING_CONSOLE="${{SENZING_PROJECT_DIR}}/var/log/senzing-console.log"
export SENZING_LOG_SENZING_DEBUG="${{SENZING_PROJECT_DIR}}/var/log/senzing-debug.log"
export SENZING_LOG_SQLITE_WEB="${{SENZING_PROJECT_DIR}}/var/log/senzing-sqlite-web.log"
export SENZING_LOG_SSHD="${{SENZING_PROJECT_DIR}}/var/log/senzing-sshd.log"
export SENZING_LOG_STREAM_LOADER="${{SENZING_PROJECT_DIR}}/var/log/senzing-stream-loader.log"
export SENZING_LOG_STREAM_PRODUCER="${{SENZING_PROJECT_DIR}}/var/log/senzing-stream-producer.log"
export SENZING_LOG_SWAGGERAPI_SWAGGER_UI="${{SENZING_PROJECT_DIR}}/var/log/swagger-ui.log"
export SENZING_LOG_WEB_APP_DEMO="${{SENZING_PROJECT_DIR}}/var/log/senzing-webapp-demo.log"
export SENZING_LOG_WEBAPP="${{SENZING_PROJECT_DIR}}/var/log/senzing-webapp.log"
export SENZING_LOG_XTERM="${{SENZING_PROJECT_DIR}}/var/log/senzing-xterm.log"
export SENZING_MSSQL_PARAMETERS=""
# export SENZING_NETWORK_PARAMETER="--net senzing-up"
export SENZING_OPT_IBM_DIR=${{SENZING_PROJECT_DIR}}/docker-db2
export SENZING_OPT_MICROSOFT_DIR=${{SENZING_PROJECT_DIR}}/opt-microsoft
export SENZING_PORTAINER_DIR=${{SENZING_PROJECT_DIR}}/var/portainer
export SENZING_PRIVILEGED_PARAMETER="--privileged"
export SENZING_RABBITMQ_PASSWORD=bitnami
export SENZING_RABBITMQ_QUEUE=senzing-rabbitmq-queue
export SENZING_RABBITMQ_USERNAME=user
export SENZING_RECORD_MAX=5000
export SENZING_REFERENCE_URL="http://hub.senzing.com/senzing-environment/reference"
export SENZING_SQL_CONNECTION="{sql_connection}"
export SENZING_SSHD_PASSWORD=passw0rd
export SENZING_SUDO=""
export SENZING_VAR_DIR=${{SENZING_PROJECT_DIR}}/var

export POSTGRES_HOST=${{SENZING_DOCKER_HOST_IP_ADDR}}
export POSTGRES_DATABASE=G2
export SENZING_API_SERVER_URL="http://${{SENZING_DOCKER_HOST_IP_ADDR}}:${{SENZING_DOCKER_PORT_SENZING_API_SERVER}}"

export DOCKER_IMAGE_NAMES_ALL=(
  "bitnami/rabbitmq:${{SENZING_DOCKER_IMAGE_VERSION_RABBITMQ}}"
  "coleifer/sqlite-web:${{SENZING_DOCKER_IMAGE_VERSION_SQLITE_WEB}}"
  "portainer/portainer:${{SENZING_DOCKER_IMAGE_VERSION_PORTAINER}}"
  "postgres:${{SENZING_DOCKER_IMAGE_VERSION_POSTGRES}}"
  "senzing/apt:${{SENZING_DOCKER_IMAGE_VERSION_APT}}"
  "senzing/db2-driver-installer:${{SENZING_DOCKER_IMAGE_VERSION_DB2_DRIVER_INSTALLER}}"
  "senzing/entity-search-web-app:${{SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP}}"
  "senzing/init-container:${{SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER}}"
  "senzing/jupyter:${{SENZING_DOCKER_IMAGE_VERSION_JUPYTER}}"
  "senzing/phppgadmin:${{SENZING_DOCKER_IMAGE_VERSION_PHPPGADMIN}}"
  "senzing/postgresql-client:${{SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT}}"
  "senzing/senzing-api-server:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_API_SERVER}}"
  "senzing/senzing-console:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE}}"
  "senzing/senzing-debug:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_DEBUG}}"
  "senzing/sshd:${{SENZING_DOCKER_IMAGE_VERSION_SSHD}}"
  "senzing/stream-loader:${{SENZING_DOCKER_IMAGE_VERSION_STREAM_LOADER}}"
  "senzing/stream-producer:${{SENZING_DOCKER_IMAGE_VERSION_STREAM_PRODUCER}}"
  "senzing/web-app-demo:${{SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO}}"
  "senzing/xterm:${{SENZING_DOCKER_IMAGE_VERSION_XTERM}}"
  "swaggerapi/swagger-ui:${{SENZING_DOCKER_IMAGE_VERSION_SWAGGERAPI_SWAGGER_UI}}"
)

export DOCKER_IMAGE_NAMES_WEBAPPDEMO=(
  "senzing/apt:${{SENZING_DOCKER_IMAGE_VERSION_APT}}"
  "senzing/g2loader:${{SENZING_DOCKER_IMAGE_VERSION_G2LOADER}}"
  "senzing/init-container:${{SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER}}"
  "senzing/senzing-console:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE}}"
  "senzing/web-app-demo:${{SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO}}"
)

export DOCKER_IMAGE_NAMES_REST=(
  "senzing/entity-search-web-app:${{SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP}}"
  "senzing/init-container:${{SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER}}"
  "senzing/senzing-api-server:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_API_SERVER}}"
  "senzing/senzing-console:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE}}"
  "senzing/sshd:${{SENZING_DOCKER_IMAGE_VERSION_SSHD}}"
  "senzing/web-app-demo:${{SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO}}"
  "swaggerapi/swagger-ui:${{SENZING_DOCKER_IMAGE_VERSION_SWAGGERAPI_SWAGGER_UI}}"
)

export DOCKER_IMAGE_NAMES_DB2=(
  "senzing/db2-driver-installer:${{SENZING_DOCKER_IMAGE_VERSION_DB2_DRIVER_INSTALLER}}"
)

export DOCKER_IMAGE_NAMES_POSTGRESQL=(
  "postgres:${{SENZING_DOCKER_IMAGE_VERSION_POSTGRES}}"
  "senzing/phppgadmin:${{SENZING_DOCKER_IMAGE_VERSION_PHPPGADMIN}}"
  "senzing/postgresql-client:${{SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT}}"
)

export DOCKER_IMAGE_NAMES_DB2=(
  "senzing/db2-driver-installer:${{SENZING_DOCKER_IMAGE_VERSION_DB2_DRIVER_INSTALLER}}"
)

export DOCKER_IMAGE_NAMES_POSTGRESQL=(
  "postgres:${{SENZING_DOCKER_IMAGE_VERSION_POSTGRES}}"
  "senzing/phppgadmin:${{SENZING_DOCKER_IMAGE_VERSION_PHPPGADMIN}}"
  "senzing/postgresql-client:${{SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT}}"
)

export DOCKER_IMAGE_NAMES_POSTGRESQLCLIENT=(
  "senzing/postgresql-client:${{SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT}}"
)

export DOCKER_IMAGE_NAMES_DEBUG=(
  "portainer/portainer:${{SENZING_DOCKER_IMAGE_VERSION_PORTAINER}}"
  "senzing/senzing-console:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE}}"
  "senzing/sshd:${{SENZING_DOCKER_IMAGE_VERSION_SSHD}}"
  "senzing/xterm:${{SENZING_DOCKER_IMAGE_VERSION_XTERM}}"
)

export DOCKER_IMAGE_NAMES_RABBITMQ=(
  "bitnami/rabbitmq:${{SENZING_DOCKER_IMAGE_VERSION_RABBITMQ}}"
)

export DOCKER_IMAGE_NAMES_SQLITEWEB=(
  "coleifer/sqlite-web:${{SENZING_DOCKER_IMAGE_VERSION_SQLITE_WEB}}"
)

export DOCKER_IMAGE_NAMES_DB2DRIVER=(
  "senzing/db2-driver-installer:${{SENZING_DOCKER_IMAGE_VERSION_DB2_DRIVER_INSTALLER}}"
)

export DOCKER_IMAGE_NAMES_ENTITYSEARCHWEBAPP=(
  "senzing/entity-search-web-app:${{SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP}}"
)

export DOCKER_IMAGE_NAMES_G2LOADER=(
  "senzing/g2loader:${{SENZING_DOCKER_IMAGE_VERSION_G2LOADER}}"
)

export DOCKER_IMAGE_NAMES_JUPYTER=(
  "senzing/jupyter:${{SENZING_DOCKER_IMAGE_VERSION_JUPYTER}}"
)

export DOCKER_IMAGE_NAMES_PHPPGADMIN=(
  "senzing/phppgadmin:${{SENZING_DOCKER_IMAGE_VERSION_PHPPGADMIN}}"
)

export DOCKER_IMAGE_NAMES_SENZINGCONSOLE=(
  "senzing/senzing-console:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE}}"
)

export DOCKER_IMAGE_NAMES_SSHD=(
  "senzing/sshd:${{SENZING_DOCKER_IMAGE_VERSION_SSHD}}"
)

export DOCKER_IMAGE_NAMES_STREAMLOADER=(
  "senzing/stream-loader:${{SENZING_DOCKER_IMAGE_VERSION_STREAM_LOADER}}"
)

export DOCKER_IMAGE_NAMES_STREAMPRODUCER=(
  "senzing/stream-producer:${{SENZING_DOCKER_IMAGE_VERSION_STREAM_PRODUCER}}"
)

export DOCKER_IMAGE_NAMES_XTERM=(
  "senzing/web-app-demo:${{SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO}}"
)

export DOCKER_IMAGE_NAMES_SWAGGER=(
  "swaggerapi/swagger-ui:${{SENZING_DOCKER_IMAGE_VERSION_SWAGGERAPI_SWAGGER_UI}}"
)

if [ "${{DATABASE_DATABASE}}" != "G2C.db" ]
then
    export POSTGRES_DATABASE=${{DATABASE_DATABASE}}
fi

"""
    return 0

# def file_docker_images_load():
#     """#! /usr/bin/env bash
#
# SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# source ${SCRIPT_DIR}/docker-environment-vars.sh
#
# export OUTPUT_DIR=${SENZING_VAR_DIR}/docker/images
#
# echo "${SENZING_HORIZONTAL_RULE}"
# echo "${SENZING_HORIZONTAL_RULE:0:2} Load docker images from ${OUTPUT_DIR}."
# echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
# echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#docker-images-load"
#
# for DOCKER_IMAGE_NAME in ${OUTPUT_DIR}/*;
# do
#
#   echo "Loading ${DOCKER_IMAGE_NAME}"
#   ${SENZING_SUDO} docker load --input ${DOCKER_IMAGE_NAME}
#
# done
#
# echo "${SENZING_HORIZONTAL_RULE:0:2}"
# echo "${SENZING_HORIZONTAL_RULE:0:2} Done."
# echo "${SENZING_HORIZONTAL_RULE}"
# """
#     return 0

# def file_docker_images_save():
#     """#! /usr/bin/env bash
#
# SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
# source ${SCRIPT_DIR}/docker-environment-vars.sh
#
# SUFFIX=$1
# SUFFIX_UPPER_CASE=$(echo "${SUFFIX:-ALL}" | tr '[:lower:]' '[:upper:]' )
# DOCKER_IMAGE_NAMES_STRING="DOCKER_IMAGE_NAMES_${SUFFIX_UPPER_CASE}"
# eval "DOCKER_IMAGE_NAMES=(\"\${${DOCKER_IMAGE_NAMES_STRING}[@]}\")"
#
# echo "${SENZING_HORIZONTAL_RULE}"
# echo "${SENZING_HORIZONTAL_RULE:0:2} Save docker images for ${SENZING_PROJECT_NAME}."
# echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
# echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#docker-images-save"
#
# export OUTPUT_DIR=${SENZING_VAR_DIR}/docker/images
# mkdir -p ${OUTPUT_DIR}
#
# for DOCKER_IMAGE_NAME in ${DOCKER_IMAGE_NAMES[@]};
# do
#
#   DOCKER_OUTPUT_FILENAME=$(echo ${DOCKER_IMAGE_NAME} | tr "/:" "--").tar
#   DOCKER_OUTPUT_PATHNAME=${OUTPUT_DIR}/${DOCKER_OUTPUT_FILENAME}
#
#   echo "Pulling ${DOCKER_IMAGE_NAME} from DockerHub."
#   ${SENZING_SUDO} docker pull ${DOCKER_IMAGE_NAME}
#
#   echo "Creating ${OUTPUT_DIR}/${DOCKER_OUTPUT_FILENAME}"
#   ${SENZING_SUDO} docker save ${DOCKER_IMAGE_NAME} --output ${DOCKER_OUTPUT_PATHNAME}
#   chmod +rx ${DOCKER_OUTPUT_PATHNAME}
#
# done
#
# echo "${SENZING_HORIZONTAL_RULE:0:2}"
# echo "${SENZING_HORIZONTAL_RULE:0:2} Done."
# echo "${SENZING_HORIZONTAL_RULE}"
# """
#     return 0


def file_docker_pull_latest():
    """#! /usr/bin/env bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

echo "${SENZING_HORIZONTAL_RULE}"
echo "${SENZING_HORIZONTAL_RULE:0:2} Pull ${SENZING_PROJECT_NAME} docker containers for DockerHub."
echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#docker-pull-latest"

${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/bitnami/rabbitmq:${SENZING_DOCKER_IMAGE_VERSION_RABBITMQ}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/coleifer/sqlite-web:${SENZING_DOCKER_IMAGE_VERSION_SQLITE_WEB}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/portainer/portainer:${SENZING_DOCKER_IMAGE_VERSION_PORTAINER}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/postgres:${SENZING_DOCKER_IMAGE_VERSION_POSTGRES}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/apt:${SENZING_DOCKER_IMAGE_VERSION_APT}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/db2-driver-installer:${SENZING_DOCKER_IMAGE_VERSION_DB2_DRIVER_INSTALLER}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/entity-search-web-app:${SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/init-container:${SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/jupyter:${SENZING_DOCKER_IMAGE_VERSION_JUPYTER}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/phppgadmin:${SENZING_DOCKER_IMAGE_VERSION_PHPPGADMIN}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/postgresql-client:${SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/senzing-api-server:${SENZING_DOCKER_IMAGE_VERSION_SENZING_API_SERVER}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/senzing-console:${SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/senzing-debug:${SENZING_DOCKER_IMAGE_VERSION_SENZING_DEBUG}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/sshd:${SENZING_DOCKER_IMAGE_VERSION_SSHD}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/stream-loader:${SENZING_DOCKER_IMAGE_VERSION_STREAM_LOADER}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/stream-producer:${SENZING_DOCKER_IMAGE_VERSION_STREAM_PRODUCER}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/web-app-demo:${SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/xterm:${SENZING_DOCKER_IMAGE_VERSION_XTERM}
${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/swaggerapi/swagger-ui:${SENZING_DOCKER_IMAGE_VERSION_SWAGGERAPI_SWAGGER_UI}

echo "${SENZING_HORIZONTAL_RULE:0:2}"
echo "${SENZING_HORIZONTAL_RULE:0:2} Done."
echo "${SENZING_HORIZONTAL_RULE}"
"""
    return 0


def file_portainer():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/portainer/portainer:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:9000 \\
        --restart always \\
        --volume ${SENZING_DOCKER_SOCKET}:/var/run/docker.sock \\
        --volume ${SENZING_PORTAINER_DIR}:/data \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_PORTAINER} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        portainer/portainer:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#portainer"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#portainer"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_PORTAINER}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_PORTAINER}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_PORTAINER}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_PORTAINER}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_postgres():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/postgres:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env POSTGRES_DB=${POSTGRES_DATABASE} \\
        --env POSTGRES_PASSWORD=${DATABASE_PASSWORD} \\
        --env POSTGRES_USERNAME=${DATABASE_USERNAME} \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:5432 \\
        --restart always \\
        --volume ${POSTGRES_DIR}:/var/lib/postgresql/data \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_POSTGRES} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        postgres:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} listening on ${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Username: ${DATABASE_USERNAME} Password: ${DATABASE_PASSWORD}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#postgres"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#postgres"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_POSTGRES}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_POSTGRES}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_POSTGRES}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_POSTGRES}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_api_server():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/senzing-api-server:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env SENZING_DATABASE_URL=${SENZING_DATABASE_URL} \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:${SENZING_DOCKER_PORT_SENZING_API_SERVER} \\
        --restart always \\
        --tty \\
        --user $(id -u):$(id -g) \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_SENZING_API_SERVER} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/senzing-api-server:${CONTAINER_VERSION} \\
            -httpPort ${SENZING_DOCKER_PORT_SENZING_API_SERVER} \\
            -bindAddr all \\
            -iniFile /etc/opt/senzing/G2Module.ini \\
            -allowedOrigins "*" \\
            -enableAdmin \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done
    sleep 10

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Try http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}/heartbeat"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-api-server"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-api-server"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_SENZING_API_SERVER}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_SENZING_API_SERVER}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_SENZING_API_SERVER}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_SENZING_API_SERVER}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_apt():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/apt:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    # Remove symbolic links.

    rm ${SENZING_G2_DIR}
    rm ${SENZING_DATA_DIR}

    # Download Senzing binaries.

    ${SENZING_SUDO} docker run \\
        --env SENZING_ACCEPT_EULA=${SENZING_ACCEPT_EULA} \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --rm \\
        --tty \\
        --user $(id -u):$(id -g) \\
        --volume ${SENZING_PROJECT_DIR}:/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_APT} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/apt:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    # Create symbolic links to timestamped directories.

    TIMESTAMP=$(date +%s)

    pushd ${SENZING_PROJECT_DIR}
    mv g2 g2.${TIMESTAMP}
    ln -s g2.${TIMESTAMP} g2

    mv data data-backup
    mv data-backup/3.0.0 data.${TIMESTAMP}
    rmdir data-backup
    ln -s data.${TIMESTAMP} data
    popd
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-apt"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_APT}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_APT}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_APT}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_console():
    """#!/usr/bin/env bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_SENZING_CONSOLE}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_SENZING_CONSOLE}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_SENZING_CONSOLE}"

echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

if [ "${CONTAINER_VERSION}" == "latest" ]
then
    ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/senzing-console:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
fi

echo "${SENZING_HORIZONTAL_RULE}"
echo "${SENZING_HORIZONTAL_RULE:0:2} To exit ${CONTAINER_NAME}, type 'exit'"
echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-console"
echo "${SENZING_HORIZONTAL_RULE}"

${SENZING_SUDO} docker run \\
    --interactive \\
    --rm \\
    --tty \\
    --user $(id -u):$(id -g) \\
    --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
    --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
    --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
    --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
    --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
    --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
    ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
    ${SENZING_DOCKER_RUN_PARAMETERS_CONSOLE} \\
    ${SENZING_NETWORK_PARAMETER} \\
    ${SENZING_MSSQL_PARAMETERS} \\
    ${SENZING_PRIVILEGED_PARAMETER} \\
    senzing/senzing-console:${CONTAINER_VERSION} /bin/bash
"""
    return 0


def file_senzing_db2_driver_installer():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/db2-driver-installer:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    mv ${SENZING_OPT_IBM_DIR} ${SENZING_OPT_IBM_DIR}.$(date +%s) || true
    mkdir -p ${SENZING_OPT_IBM_DIR}

    ${SENZING_SUDO} docker run \\
        --name ${CONTAINER_NAME} \\
        --rm \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_DB2_DRIVER_INSTALLER} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/db2-driver-installer:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    sudo -p "sudo access is required to change file ownership.  Please enter your password:  " docker info >> /dev/null 2>&1
    sudo chown -R $(id -u):$(id -g) ${SENZING_OPT_IBM_DIR}

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} has completed."
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-db2-driver-installer"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-db2-driver-installer"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_DB2_DRIVER_INSTALLER}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_DB2_DRIVER_INSTALLER}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_DB2_DRIVER_INSTALLER}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_debug():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/senzing-debug:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --cap-add=ALL \\
        --detach \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --restart always \\
        --tty \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_DEBUG} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        ${SENZING_RUNAS_USER_PARAMETER} \\
        senzing/senzing-debug:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} is running."
    echo "${SENZING_HORIZONTAL_RULE:0:2} To enter ${CONTAINER_NAME} container, run:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} sudo docker exec -it ${CONTAINER_NAME} /bin/bash"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-debug"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-debug"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_SENZING_DEBUG}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_SENZING_DEBUG}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_SENZING_DEBUG}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_down():
    """#!/usr/bin/env bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

echo "${SENZING_HORIZONTAL_RULE}"
echo "${SENZING_HORIZONTAL_RULE:0:2} Bringing down all ${SENZING_PROJECT_NAME} docker containers."
echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-down"
echo "${SENZING_HORIZONTAL_RULE:0:2}"

DOCKER_CONTAINERS=(
    "${SENZING_DOCKER_CONTAINER_NAME_APT};${SENZING_LOG_APT}"
    "${SENZING_DOCKER_CONTAINER_NAME_DB2_DRIVER_INSTALLER};${SENZING_LOG_DB2_DRIVER_INSTALLER}"
    "${SENZING_DOCKER_CONTAINER_NAME_ENTITY_SEARCH_WEB_APP};${SENZING_LOG_WEBAPP}"
    "${SENZING_DOCKER_CONTAINER_NAME_INIT_CONTAINER};${SENZING_LOG_INIT_CONTAINER}"
    "${SENZING_DOCKER_CONTAINER_NAME_JUPYTER};${SENZING_LOG_JUPYTER}"
    "${SENZING_DOCKER_CONTAINER_NAME_MSSQL_DRIVER_INSTALLER};${SENZING_LOG_MSSQL_DRIVER_INSTALLER}"
    "${SENZING_DOCKER_CONTAINER_NAME_PHPPGADMIN};${SENZING_LOG_PHPPGADMIN}"
    "${SENZING_DOCKER_CONTAINER_NAME_PORTAINER};${SENZING_LOG_PORTAINER}"
    "${SENZING_DOCKER_CONTAINER_NAME_POSTGRESQL_INIT};${SENZING_LOG_POSTGRESQL_INIT}"
    "${SENZING_DOCKER_CONTAINER_NAME_POSTGRES};${SENZING_LOG_POSTGRES}"
    "${SENZING_DOCKER_CONTAINER_NAME_QUICKSTART};${SENZING_LOG_QUICKSTART}"
    "${SENZING_DOCKER_CONTAINER_NAME_RABBITMQ};${SENZING_LOG_RABBITMQ}"
    "${SENZING_DOCKER_CONTAINER_NAME_SENZING_API_SERVER};${SENZING_LOG_SENZING_API_SERVER}"
    "${SENZING_DOCKER_CONTAINER_NAME_SENZING_DEBUG};${SENZING_LOG_SENZING_DEBUG}"
    "${SENZING_DOCKER_CONTAINER_NAME_SQLITE_WEB};${SENZING_LOG_SQLITE_WEB}"
    "${SENZING_DOCKER_CONTAINER_NAME_SSHD};${SENZING_LOG_SSHD}"
    "${SENZING_DOCKER_CONTAINER_NAME_STREAM_LOADER};${SENZING_LOG_STREAM_LOADER}"
    "${SENZING_DOCKER_CONTAINER_NAME_STREAM_PRODUCER};${SENZING_LOG_STREAM_PRODUCER}"
    "${SENZING_DOCKER_CONTAINER_NAME_SWAGGERAPI_SWAGGER_UI};${SENZING_LOG_SWAGGERAPI_SWAGGER_UI}"
    "${SENZING_DOCKER_CONTAINER_NAME_WEB_APP_DEMO};${SENZING_LOG_WEB_APP_DEMO}"
    "${SENZING_DOCKER_CONTAINER_NAME_XTERM};${SENZING_LOG_XTERM}"
)

for DOCKER_CONTAINER in ${DOCKER_CONTAINERS[@]};
do
    IFS=";" read -r -a CONTAINER_DATA <<< "${DOCKER_CONTAINER}"
    CONTAINER_NAME="${CONTAINER_DATA[0]}                           "
    CONTAINER_LOG="${CONTAINER_DATA[1]}"
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    echo "${SENZING_HORIZONTAL_RULE:0:2} Down: ${CONTAINER_NAME}"
done

echo "${SENZING_HORIZONTAL_RULE:0:2}"
echo "${SENZING_HORIZONTAL_RULE:0:2} Done."
echo "${SENZING_HORIZONTAL_RULE}"
"""
    return 0


def file_senzing_info():
    """#!/usr/bin/env bash

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${{BASH_SOURCE[0]}}" )" >/dev/null 2>&1 && pwd )"
PROJECT_DIR="$(dirname ${{SCRIPT_DIR}})"

source ${{SCRIPT_DIR}}/docker-environment-vars.sh

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

COLUMN_WIDTH_1=${{#SENZING_PROJECT_NAME}}
COLUMN_WIDTH=$((${{COLUMN_WIDTH_1}}+16))

DOCKER_CONTAINERS=(
    "${{SENZING_DOCKER_CONTAINER_NAME_SENZING_API_SERVER}};${{SENZING_DOCKER_PORT_SENZING_API_SERVER}};senzing/senzing-api-server:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_API_SERVER}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_SENZING_DEBUG}};----;senzing/senzing-debug:${{SENZING_DOCKER_IMAGE_VERSION_SENZING_DEBUG}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_JUPYTER}};${{SENZING_DOCKER_PORT_JUPYTER}};senzing/jupyter:${{SENZING_DOCKER_IMAGE_VERSION_JUPYTER}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_PHPPGADMIN}};${{SENZING_DOCKER_PORT_PHPPGADMIN_HTTP}};senzing/phppgadmin:${{SENZING_DOCKER_IMAGE_VERSION_PHPPGADMIN}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_PORTAINER}};${{SENZING_DOCKER_PORT_PORTAINER}};portainer/portainer:${{SENZING_DOCKER_IMAGE_VERSION_PORTAINER}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_POSTGRES}};${{SENZING_DOCKER_PORT_POSTGRES}};postgres:${{SENZING_DOCKER_IMAGE_VERSION_POSTGRES}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_QUICKSTART}};${{SENZING_DOCKER_PORT_ENTITY_SEARCH_WEB_APP}};senzing/web-app-demo:${{SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_SQLITE_WEB}};${{SENZING_DOCKER_PORT_SENZING_SQLITE_WEB}};coleifer/sqlite-web:${{SENZING_DOCKER_IMAGE_VERSION_SQLITE_WEB}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_SSHD}};${{SENZING_DOCKER_PORT_SSHD}};senzing/sshd:${{SENZING_DOCKER_IMAGE_VERSION_SSHD}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_STREAM_LOADER}};----;senzing/stream-loader:${{SENZING_DOCKER_IMAGE_VERSION_STREAM_LOADER}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_STREAM_PRODUCER}};----;senzing/stream-producer:${{SENZING_DOCKER_IMAGE_VERSION_STREAM_PRODUCER}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_SWAGGERAPI_SWAGGER_UI}};${{SENZING_DOCKER_PORT_SENZING_SWAGGERAPI_SWAGGER_UI}};swaggerapi/swagger-ui:${{SENZING_DOCKER_IMAGE_VERSION_SWAGGERAPI_SWAGGER_UI}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_ENTITY_SEARCH_WEB_APP}};${{SENZING_DOCKER_PORT_ENTITY_SEARCH_WEB_APP}};senzing/entity-search-web-app:${{SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_WEB_APP_DEMO}};${{SENZING_DOCKER_PORT_ENTITY_SEARCH_WEB_APP}};senzing/web-app-demo:${{SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_XTERM}};${{SENZING_DOCKER_PORT_XTERM}};senzing/xterm:${{SENZING_DOCKER_IMAGE_VERSION_XTERM}}"
    "${{SENZING_DOCKER_CONTAINER_NAME_RABBITMQ}};${{SENZING_DOCKER_PORT_RABBITMQ_UI}};bitnami/rabbitmq:${{SENZING_DOCKER_IMAGE_VERSION_RABBITMQ}}"
)

echo "${{SENZING_HORIZONTAL_RULE}}"
echo "${{SENZING_HORIZONTAL_RULE:0:2}} senzing-info.sh {environment_version} ({environment_updated})"
if [[ ( -n "$(command -v jq)" ) ]]; then

    G2_BUILD_VERSION_FILE=${{PROJECT_DIR}}/g2BuildVersion.json
    if [ -f "${{PROJECT_DIR}}/g2/g2BuildVersion.json"  ]; then
        G2_BUILD_VERSION_FILE=${{PROJECT_DIR}}/g2/g2BuildVersion.json
    fi

    SENZING_VERSION_API=$(jq --raw-output ".VERSION" ${{G2_BUILD_VERSION_FILE}})
    SENZING_VERSION_DATA=$(jq --raw-output ".DATA_VERSION" ${{G2_BUILD_VERSION_FILE}})
    echo "${{SENZING_HORIZONTAL_RULE:0:2}} senzing api: ${{SENZING_VERSION_API}}  data: ${{SENZING_VERSION_DATA}}"
fi
echo "${{SENZING_HORIZONTAL_RULE:0:2}}"

for DOCKER_CONTAINER in ${{DOCKER_CONTAINERS[@]}};
do
    IFS=";" read -r -a CONTAINER_DATA <<< "${{DOCKER_CONTAINER}}"
    CONTAINER_NAME="${{CONTAINER_DATA[0]}}                           "
    CONTAINER_PORT="${{CONTAINER_DATA[1]}}"
    CONTAINER_VERSION="${{CONTAINER_DATA[2]}}"
    if [ "$( docker container inspect -f '{{{{.State.Status}}}}' ${{CONTAINER_NAME}} 2>/dev/null )" == "running" ]; then
        printf "${{SENZING_HORIZONTAL_RULE:0:2}} %-${{COLUMN_WIDTH}}s   ${{GREEN}}up${{NC}} http://${{SENZING_DOCKER_HOST_IP_ADDR}}:${{CONTAINER_PORT}}   ${{CONTAINER_VERSION}}\\n" ${{CONTAINER_NAME}}
    else
        printf "${{SENZING_HORIZONTAL_RULE:0:2}} %-${{COLUMN_WIDTH}}s ${{RED}}down${{NC}} http://${{SENZING_DOCKER_HOST_IP_ADDR}}:${{CONTAINER_PORT}}   ${{CONTAINER_VERSION}}\\n" ${{CONTAINER_NAME}}
    fi
done

echo "${{SENZING_HORIZONTAL_RULE:0:2}}"
echo "${{SENZING_HORIZONTAL_RULE:0:2}} For more information:"
echo "${{SENZING_HORIZONTAL_RULE:0:2}} ${{SENZING_REFERENCE_URL}}#senzing-info"
echo "${{SENZING_HORIZONTAL_RULE}}"
"""
    return 0


def file_senzing_init_container():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/init-container:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --env SENZING_DATABASE_URL=${SENZING_DATABASE_URL} \\
        --env SENZING_GID=$(id -g) \\
        --env SENZING_UID=$(id -u) \\
        --name ${CONTAINER_NAME} \\
        --rm \\
        --user 0 \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_INIT_CONTAINER} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/init-container:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} has completed."
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-init-container"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-init-container"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_INIT_CONTAINER}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_INIT_CONTAINER}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_jupyter():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    chmod -R 777 ${SENZING_PROJECT_DIR}/var/sqlite/

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/jupyter:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env SENZING_SQL_CONNECTION=${SENZING_SQL_CONNECTION} \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:8888 \\
        --restart always \\
        --tty \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_PROJECT_DIR}:/notebooks/shared \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_JUPYTER} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/jupyter:${CONTAINER_VERSION} start.sh jupyter notebook --NotebookApp.token='' \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /notebooks/shared > ${SENZING_PROJECT_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-jupyter"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-jupyter"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_JUPYTER}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_JUPYTER}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_JUPYTER}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_JUPYTER}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_mssql_driver_installer():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/apt:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    mv ${SENZING_OPT_MICROSOFT_DIR} ${SENZING_OPT_MICROSOFT_DIR}.$(date +%s) || true
    mkdir -p ${SENZING_OPT_MICROSOFT_DIR}

    ${SENZING_SUDO} docker run \\
        --env ACCEPT_EULA=Y \\
        --name ${CONTAINER_NAME} \\
        --rm \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_MSSQL_DRIVER_INSTALLER} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/apt:${CONTAINER_VERSION} -y install msodbcsql17 \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    sudo -p "sudo access is required to change file ownership.  Please enter your password:  " docker info >> /dev/null 2>&1
    sudo chown -R $(id -u):$(id -g) ${SENZING_OPT_MICROSOFT_DIR}

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} has completed."
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-mssql-driver-installer"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-mssql-driver-installer"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_MSSQL_DRIVER_INSTALLER}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_MSSQL_DRIVER_INSTALLER}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_APT}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_phppgadmin():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/phppgadmin:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env PHP_PG_ADMIN_AJAX_REFRESH=3 \\
        --env PHP_PG_ADMIN_AUTO_COMPLETE="default on" \\
        --env PHP_PG_ADMIN_DEFAULT_LANG=auto \\
        --env PHP_PG_ADMIN_EXTRA_LOGIN_SECURITY=false \\
        --env PHP_PG_ADMIN_HELP_BASE=http://www.postgresql.org/docs/%s/interactive/ \\
        --env PHP_PG_ADMIN_LEFT_WIDTH=200 \\
        --env PHP_PG_ADMIN_MAX_CHARS=50 \\
        --env PHP_PG_ADMIN_MAX_ROWS=30 \\
        --env PHP_PG_ADMIN_MIN_PASSWORD_LENGTH=1 \\
        --env PHP_PG_ADMIN_OWNED_ONLY=false \\
        --env PHP_PG_ADMIN_SERVER_DEFAULT_DB=template1 \\
        --env PHP_PG_ADMIN_SERVER_DESC=PostgreSQL \\
        --env PHP_PG_ADMIN_SERVER_HOST=${POSTGRES_HOST} \\
        --env PHP_PG_ADMIN_SERVER_PG_DUMPALL_PATH=/usr/bin/pg_dumpall \\
        --env PHP_PG_ADMIN_SERVER_PG_DUMP_PATH=/usr/bin/pg_dump \\
        --env PHP_PG_ADMIN_SERVER_PORT=${SENZING_DOCKER_PORT_POSTGRES} \\
        --env PHP_PG_ADMIN_SERVER_SSL_MODE=allow \\
        --env PHP_PG_ADMIN_SHOW_ADVANCED=false \\
        --env PHP_PG_ADMIN_SHOW_COMMENTS=true \\
        --env PHP_PG_ADMIN_SHOW_OIDS=false \\
        --env PHP_PG_ADMIN_SHOW_SYSTEM=false \\
        --env PHP_PG_ADMIN_THEME=default \\
        --env PHP_PG_ADMIN_USE_XHTML_STRICT=false \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --publish ${SENZING_DOCKER_PORT_PHPPGADMIN_HTTPS}:443 \\
        --publish ${CONTAINER_PORT}:80 \\
        --restart always \\
        --tty \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_PHPPGADMIN} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/phppgadmin:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-phppgadmin"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-phppgadmin"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_PHPPGADMIN}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_PHPPGADMIN}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_PHPPGADMIN_HTTP}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_PHPPGADMIN}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_postgresql_init():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/postgresql-client:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --env SENZING_DATABASE_URL=${SENZING_DATABASE_URL} \\
        --env SENZING_SQL_FILE="/opt/senzing/g2/resources/schema/g2core-schema-postgresql-create.sql" \\
        --name ${CONTAINER_NAME} \\
        --rm \\
        --user $(id -u):$(id -g) \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_POSTGRESQL_CLIENT} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/postgresql-client:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} has completed."
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-postgresql-init"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-postgresql-init"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_POSTGRESQL_INIT}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_POSTGRESQL_INIT}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_POSTGRESQL_CLIENT}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_quickstart_demo():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/web-app-demo:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env SENZING_DATABASE_URL=${SENZING_DATABASE_URL} \\
        --name ${CONTAINER_NAME} \\
        --publish ${SENZING_DOCKER_PORT_SENZING_API_SERVER}:8250 \\
        --publish ${CONTAINER_PORT}:8251 \\
        --restart always \\
        --user $(id -u):$(id -g) \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_WEB_APP_DEMO} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/web-app-demo:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-quickstart-demo"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-quickstart-demo"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_QUICKSTART}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_QUICKSTART}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_ENTITY_SEARCH_WEB_APP}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_rabbitmq():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    mkdir -p ${RABBITMQ_DIR}
    chmod 777 ${RABBITMQ_DIR}

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/bitnami/rabbitmq:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env RABBITMQ_PASSWORD=${SENZING_RABBITMQ_PASSWORD} \\
        --env RABBITMQ_USERNAME=${SENZING_RABBITMQ_USERNAME} \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:15672 \\
        --publish ${SENZING_DOCKER_PORT_RABBITMQ}:5672 \\
        --restart always \\
        --tty \\
        --volume ${RABBITMQ_DIR}:/bitnami \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_RABBITMQ} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        bitnami/rabbitmq:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done
    sleep 10

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Username: ${SENZING_RABBITMQ_USERNAME} Password: ${SENZING_RABBITMQ_PASSWORD}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /bitnami  > ${RABBITMQ_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-rabbitmq"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-rabbitmq"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_RABBITMQ}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_RABBITMQ}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_RABBITMQ_UI}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_RABBITMQ}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_sqlite_web():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/coleifer/sqlite-web:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env SQLITE_DATABASE=${DATABASE_DATABASE} \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:8080 \\
        --restart always \\
        --tty \\
        --user $(id -u):$(id -g) \\
        --volume ${SENZING_VAR_DIR}/sqlite:/data \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_SQLITE_WEB} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        coleifer/sqlite-web:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /data  > ${SENZING_VAR_DIR}/sqlite"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-sqlite-web"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-sqlite-web"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_SQLITE_WEB}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_SQLITE_WEB}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_SENZING_SQLITE_WEB}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_SQLITE_WEB}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_sshd():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/sshd:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env ROOT_PASSWORD=${SENZING_SSHD_PASSWORD} \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:22 \\
        --restart always \\
        --tty \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_DEBUG} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        ${SENZING_RUNAS_USER_PARAMETER} \\
        senzing/sshd:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} is running."
    echo "${SENZING_HORIZONTAL_RULE:0:2} To enter ${CONTAINER_NAME} container, run:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ssh root@localhost -p ${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}     Password: ${SENZING_SSHD_PASSWORD}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-sshd"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-debug"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_SSHD}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_SSHD}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_SSHD}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_SSHD}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_stream_loader():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/stream-loader:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env LC_CTYPE="en_us.utf8" \\
        --env SENZING_DATABASE_URL=${SENZING_DATABASE_URL} \\
        --env SENZING_DATA_SOURCE=TEST \\
        --env SENZING_RABBITMQ_HOST=${SENZING_DOCKER_HOST_IP_ADDR} \\
        --env SENZING_RABBITMQ_PASSWORD=${SENZING_RABBITMQ_PASSWORD} \\
        --env SENZING_RABBITMQ_PORT=${SENZING_DOCKER_PORT_RABBITMQ} \\
        --env SENZING_RABBITMQ_QUEUE=${SENZING_RABBITMQ_QUEUE} \\
        --env SENZING_RABBITMQ_USERNAME=${SENZING_RABBITMQ_USERNAME} \\
        --env SENZING_RABBITMQ_USE_EXISTING_ENTITIES="False" \\
        --env SENZING_SUBCOMMAND=rabbitmq \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --restart always \\
        --tty \\
        --user $(id -u):$(id -g) \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_STREAM_LOADER} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/stream-loader:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} is running."
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-stream-loader"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-stream-loader"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_STREAM_LOADER}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_STREAM_LOADER}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_STREAM_LOADER}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""


def file_senzing_stream_producer():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/stream-producer:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env SENZING_INPUT_URL=${SENZING_INPUT_URL} \\
        --env SENZING_RABBITMQ_HOST=${SENZING_DOCKER_HOST_IP_ADDR} \\
        --env SENZING_RABBITMQ_PASSWORD=${SENZING_RABBITMQ_PASSWORD} \\
        --env SENZING_RABBITMQ_PORT=${SENZING_DOCKER_PORT_RABBITMQ} \\
        --env SENZING_RABBITMQ_QUEUE=${SENZING_RABBITMQ_QUEUE} \\
        --env SENZING_RABBITMQ_USERNAME=${SENZING_RABBITMQ_USERNAME} \\
        --env SENZING_RABBITMQ_USE_EXISTING_ENTITIES="False" \\
        --env SENZING_RECORD_MAX=${SENZING_RECORD_MAX} \\
        --env SENZING_RECORD_MONITOR=1000 \\
        --env SENZING_SUBCOMMAND=json-to-rabbitmq \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --rm \\
        --tty \\
        --user $(id -u):$(id -g) \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_STREAM_PRODUCER} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/stream-producer:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} is running."
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-stream-producer"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-stream-producer"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_STREAM_PRODUCER}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_STREAM_PRODUCER}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_STREAM_PRODUCER}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_webapp():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/entity-search-web-app:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env SENZING_API_SERVER_URL=${SENZING_API_SERVER_URL} \\
        --env SENZING_WEB_SERVER_ADMIN_AUTH_MODE='JWT' \\
        --env SENZING_WEB_SERVER_ADMIN_AUTH_PATH="http://${SENZING_DOCKER_HOST_IP_ADDR}:${SENZING_DOCKER_PORT_ENTITY_SEARCH_WEB_APP}" \\
        --env SENZING_WEB_SERVER_PORT=${CONTAINER_PORT} \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:${CONTAINER_PORT} \\
        --restart always \\
        --tty \\
        --user 0 \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_ENTITY_SEARCH_WEB_APP} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/entity-search-web-app:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-webapp"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-webapp"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_WEBAPP}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_ENTITY_SEARCH_WEB_APP}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_ENTITY_SEARCH_WEB_APP}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_ENTITY_SEARCH_WEB_APP}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_webapp_demo():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function init {
    if [ "${SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/init-container:${SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \
        --env SENZING_DATABASE_URL=${SENZING_DATABASE_URL} \\
        --env SENZING_GID=$(id -g) \\
        --env SENZING_UID=$(id -u) \\
        --name ${SENZING_DOCKER_CONTAINER_NAME_INIT_CONTAINER} \\
        --rm \\
        --user 0 \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_INIT_CONTAINER} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/init-container:${SENZING_DOCKER_IMAGE_VERSION_INIT_CONTAINER} \\
        >> ${CONTAINER_LOG} 2>&1
}

function up {
    echo -ne "[2K${CONTAINER_NAME} status: starting...
"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/web-app-demo:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env SENZING_DATABASE_URL=${SENZING_DATABASE_URL} \\
        --name ${CONTAINER_NAME} \\
        --publish ${SENZING_DOCKER_PORT_SENZING_API_SERVER}:8250 \\
        --publish ${CONTAINER_PORT}:8251 \\
        --restart always \\
        --user $(id -u):$(id -g) \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_WEB_APP_DEMO} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/web-app-demo:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$(${SENZING_SUDO} docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}
"
        sleep 5
        CONTAINER_STATUS="$(${SENZING_SUDO} docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} entity-search-web-app running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} senzing-api-server running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${SENZING_DOCKER_PORT_SENZING_API_SERVER}/heartbeat"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-webapp-demo"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${SENZING_DOCKER_CONTAINER_NAME_INIT_CONTAINER} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${SENZING_DOCKER_CONTAINER_NAME_INIT_CONTAINER} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | init | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-webapp-demo"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_WEB_APP_DEMO}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_WEB_APP_DEMO}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_ENTITY_SEARCH_WEB_APP}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_WEB_APP_DEMO}"

# Used when senzing-up calls this script, senzing-up prompts for sudo if required.
# User running senzing-up could be using password less sudo, without this and before modifying SENZING_SUDO
# in docker-environment-vars.sh this script could fail on docker permissions
if [[ -z ${SENZING_SUDO} && $2 == 'SUDO'  ]]; then
    export SENZING_SUDO="sudo"
fi

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "init" ]; then
    down
    init
    up
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_senzing_xterm():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/senzing/xterm:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --interactive \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:5000 \\
        --restart always \\
        --tty \\
        --user $(id -u):$(id -g) \\
        --volume ${SENZING_DATA_VERSION_DIR}:/opt/senzing/data \\
        --volume ${SENZING_ETC_DIR}:/etc/opt/senzing \\
        --volume ${SENZING_G2_DIR}:/opt/senzing/g2 \\
        --volume ${SENZING_OPT_IBM_DIR}:/opt/IBM \\
        --volume ${SENZING_OPT_MICROSOFT_DIR}:/opt/microsoft \\
        --volume ${SENZING_VAR_DIR}:/var/opt/senzing \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_XTERM} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_MSSQL_PARAMETERS} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        senzing/xterm:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    COUNTER=0
    COUNTER_NOTICE=5
    TIME_STRING=".."
    CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    while [ "${CONTAINER_STATUS}" != "running" ]; do
        COUNTER=$((${COUNTER}+1))
        if [ "${COUNTER}" -eq "${COUNTER_NOTICE}" ]; then
            echo -ne "\033[2K"
            echo ""
            echo "To see what is happening behind-the-scenes, view the log at"
            echo "${CONTAINER_LOG}"
            echo "and/or run 'docker logs ${CONTAINER_NAME}'"
            echo ""
        fi
        TIME_STRING="${TIME_STRING}."
        echo -ne "\033[2K${CONTAINER_NAME} status: ${CONTAINER_STATUS}${TIME_STRING}\r"
        sleep 5
        CONTAINER_STATUS="$( docker container inspect -f '{{.State.Status}}' ${CONTAINER_NAME})"
    done

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} To enter ${CONTAINER_NAME} container, run:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} docker exec -it ${CONTAINER_NAME} /bin/bash"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Mount information: (Format: in container > on host)"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /etc/opt/senzing  > ${SENZING_ETC_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/data > ${SENZING_DATA_VERSION_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /opt/senzing/g2   > ${SENZING_G2_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   /var/opt/senzing  > ${SENZING_VAR_DIR}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#senzing-xterm"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#senzing-xterm"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_XTERM}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_XTERM}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_XTERM}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_XTERM}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0


def file_swagger_ui():
    """#!/usr/bin/env bash

# --- Functions ---------------------------------------------------------------

function up {
    echo -ne "\033[2K${CONTAINER_NAME} status: starting...\r"

    if [ "${CONTAINER_VERSION}" == "latest" ]
    then
        ${SENZING_SUDO} docker pull ${SENZING_DOCKER_REGISTRY_URL}/swaggerapi/swagger-ui:${CONTAINER_VERSION} >> ${CONTAINER_LOG} 2>&1
    fi

    ${SENZING_SUDO} docker run \\
        --detach \\
        --env URL=https://raw.githubusercontent.com/Senzing/senzing-rest-api-specification/main/senzing-rest-api.yaml \\
        --name ${CONTAINER_NAME} \\
        --publish ${CONTAINER_PORT}:8080 \\
        --restart always \\
        ${SENZING_DOCKER_RUN_PARAMETERS_GLOBAL} \\
        ${SENZING_DOCKER_RUN_PARAMETERS_SWAGGERAPI_SWAGGER_UI} \\
        ${SENZING_NETWORK_PARAMETER} \\
        ${SENZING_PRIVILEGED_PARAMETER} \\
        swaggerapi/swagger-ui:${CONTAINER_VERSION} \\
        >> ${CONTAINER_LOG} 2>&1

    echo "${SENZING_HORIZONTAL_RULE}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${CONTAINER_NAME} running on http://${SENZING_DOCKER_HOST_IP_ADDR}:${CONTAINER_PORT}"
    echo "${SENZING_HORIZONTAL_RULE:0:2} Logs:"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   ${CONTAINER_LOG}"
    echo "${SENZING_HORIZONTAL_RULE:0:2}   and/or run 'docker logs ${CONTAINER_NAME}'"
    echo "${SENZING_HORIZONTAL_RULE:0:2} For more information:"
    echo "${SENZING_HORIZONTAL_RULE:0:2} ${SENZING_REFERENCE_URL}#swagger-ui"
    echo "${SENZING_HORIZONTAL_RULE}"
}

function down {
    ${SENZING_SUDO} docker stop ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
    ${SENZING_SUDO} docker rm   ${CONTAINER_NAME} >> ${CONTAINER_LOG} 2>&1
}

function usage {
    echo "usage: $0 [up | down | restart]"
    echo "For more information:"
    echo "${SENZING_REFERENCE_URL}#swagger-ui"
}

# --- Main --------------------------------------------------------------------

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
source ${SCRIPT_DIR}/docker-environment-vars.sh

CONTAINER_LOG="${SENZING_LOG_SWAGGERAPI_SWAGGER_UI}"
CONTAINER_NAME="${SENZING_DOCKER_CONTAINER_NAME_SWAGGERAPI_SWAGGER_UI}"
CONTAINER_PORT="${SENZING_DOCKER_PORT_SENZING_SWAGGERAPI_SWAGGER_UI}"
CONTAINER_VERSION="${SENZING_DOCKER_IMAGE_VERSION_SWAGGERAPI_SWAGGER_UI}"

if [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "restart" ]; then
    down
    up
else
    usage
fi
"""
    return 0

# -----------------------------------------------------------------------------
# Utility functions
# -----------------------------------------------------------------------------


def inspect_g2module_ini():

    g2module_ini_for_docker = {
        "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSEFILE": "/etc/opt/senzing/g2.lic",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data",
        },
    }

    # Read G2Module.ini.

    filename = "{0}/G2Module.ini".format(os.environ.get("SENZING_ETC_DIR", "/etc/opt/senzing"))
    config_parser = configparser.ConfigParser()
    config_parser.optionxform = str  # Maintain case of keys.
    config_parser.read(filename)

    #  Verify values.

    logging.info(message_info(210))
    for section, options in g2module_ini_for_docker.items():
        for option, docker_value in options.items():
            try:
                value = config_parser.get(section, option)
                if value == docker_value:
                    logging.info(message_info(211, section, option, value))
                else:
                    logging.info(message_info(212, section, option, value, docker_value))
                    report_warnings.append(message_warning(212, section, option, value, docker_value))
            except:
                logging.info(message_info(213, section, option, docker_value))


def log_environment_variables():

    # List variables and default values.

    environment_variables = {
        "GIT_ACCOUNT": None,
        "GIT_REPOSITORY": None,
        "GIT_ACCOUNT_DIR": None,
        "GIT_REPOSITORY_DIR": None,
        "JUPYTER_NOTEBOOKS_SHARED_DIR": "~",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_USERNAME": "postgres",
        "RABBITMQ_DIR": None,
        "RABBITMQ_USERNAME": "user",
        "RABBITMQ_PASSWORD": "bitnami",
        "SENZING_DATA_SOURCE": "TEST",
        "SENZING_DATA_VERSION_DIR": "/opt/senzing/data/3.0.0",
        "SENZING_ETC_DIR": "/etc/opt/senzing",
        "SENZING_G2_DIR": "/opt/senzing/g2",
        "SENZING_VAR_DIR": "/var/opt/senzing",
    }

    # Log values.

    logging.info(message_info(170))
    for key, default_value in environment_variables.items():
        environment_value = os.environ.get(key)
        if environment_value:
            logging.info(message_info(171, key, environment_value))
        elif default_value:
            logging.info(message_info(172, key, default_value))
        else:
            logging.info(message_info(173, key))
            report_warnings.append(message_warning(352, key))


def log_files():

    # List variables and default values.

    files = {
        "G2Module.ini": {
            "docker": "/etc/opt/senzing/G2Module.ini",
            "dockerHost": "{0}/G2Module.ini".format(os.environ.get("SENZING_ETC_DIR", "/etc/opt/senzing"))
        }
    }

    # Log file contents.

    for file, values in files.items():
        logging.info(message_info(190))
        logging.info(message_info(191, values.get("dockerHost")))
        logging.info(message_info(192, values.get("docker")))
        logging.info(message_info(193))
        with open(values.get("dockerHost"), "r", newline=None) as input_file:
            for input_line in input_file:
                logging.info(message_info(194, input_line.rstrip()))
    logging.info(message_info(101))


def project_copy_etc(project_dir):

    # Synthesize variables.

    host_etc = "{0}/etc".format(project_dir)
    docker_etc = "{0}/docker-etc".format(project_dir)
    docker_etc_old = "{0}/docker-etc.{1}".format(project_dir, int(time.time()))

    # If directory exists, back it up.

    if os.path.exists(docker_etc):
        logging.info(message_info(161, docker_etc_old, docker_etc))
        shutil.move(docker_etc, docker_etc_old)

    # Copy directory.

    try:
        logging.info(message_info(164, docker_etc, host_etc))
        shutil.copytree(host_etc, docker_etc)
    except shutil.Error as err:
        exit_error(760, host_etc, docker_etc, err)
    except OSError as err:
        exit_error(761, host_etc, docker_etc, err)


def project_create_docker_bin_directory(project_dir):

    # Specify output directory and backup directory.

    output_directory = "{0}/docker-bin".format(project_dir)
    backup_directory = "{0}.{1}".format(output_directory, int(time.time()))

    # If output directory exists, back it up.

    if os.path.exists(output_directory):
        logging.info(message_info(161, backup_directory, output_directory))
        shutil.move(output_directory, backup_directory)

    # Make .../docker-bin directory.

    try:
        os.makedirs(output_directory, exist_ok=True)
    except PermissionError as err:
        exit_error(702, output_directory, err)


def project_create_docker_bin_files(project_dir, docker_bin_files):

    # Specify output directory and backup directory.

    output_directory = "{0}/docker-bin".format(project_dir)

    # Write files from function docstrings.

    for filename, function in docker_bin_files.items():
        full_filename = "{0}/{1}".format(output_directory, filename)
        if not os.path.exists(full_filename):
            logging.info(message_info(165, full_filename))
            with open(full_filename, 'w') as file:
                file.write(function.__doc__)
            os.chmod(full_filename, 0o755)
        else:
            logging.info(message_info(163, full_filename))


def project_create_docker_environment_vars(project_dir, project_name, docker_host_ip_addr, sql_connection):

    # Specify output directory and backup directory.

    output_directory = "{0}/docker-bin".format(project_dir)

    # Calculate sql_connection.

    # FIXME:  Get path from setupEnv script
    project_config_file = "{0}/docker-etc/G2Module.ini".format(project_dir)

    # Read configuration file.

    if not sql_connection:
        config_parser = configparser.ConfigParser()
        config_parser.optionxform = str  # Maintain case of keys.
        config_parser.read(project_config_file)
        try:
            sql_connection = config_parser.get("SQL", "CONNECTION")
        except:
            pass

    # Calculate senzing_database_url.

    parsed_database_connection = parse_database_connection(sql_connection)
    senzing_database_url = get_g2_database_url(parsed_database_connection)

    schema = parsed_database_connection.get("schema", "")
    if parsed_database_connection.get("scheme", "") == "sqlite3":
        schema = os.path.basename(parsed_database_connection.get("path", ""))

    # Create docker-environment-vars.sh

    variables = {
        "database_database": schema,
        "database_host": parsed_database_connection.get("hostname", ""),
        "database_password": parsed_database_connection.get("password", ""),
        "database_port": parsed_database_connection.get("port", ""),
        "database_protocol": parsed_database_connection.get("scheme", ""),
        "database_username": parsed_database_connection.get("username", ""),
        "docker_host_ip_addr": docker_host_ip_addr,
        "environment_updated": __updated__,
        "environment_version": __version__,
        "project_dir": project_dir,
        "project_name": project_name,
        "senzing_database_url": senzing_database_url,
        "senzing_project_dir_suffix": "",
        "sql_connection": sql_connection
    }

    filename = "{0}/docker-environment-vars.sh".format(output_directory)
    with open(filename, 'w') as file:
        logging.info(message_warning(165, filename))
        file.write(file_docker_environment_vars.__doc__.format(**variables))
    os.chmod(filename, 0o755)

    filename = "{0}/senzing-info.sh".format(output_directory)
    with open(filename, 'w') as file:
        logging.info(message_warning(165, filename))
        file.write(file_senzing_info.__doc__.format(**variables))
    os.chmod(filename, 0o755)


def project_create_docker_environment_vars_macos(project_dir, project_name, docker_host_ip_addr, g2_database_url):

    # Specify output directory and backup directory.

    output_directory = "{0}/docker-bin".format(project_dir)

    # Calculate senzing_database_url.

    parsed_database_url = parse_database_url(g2_database_url)
    sql_connection = get_sql_connection(parsed_database_url)

    schema = parsed_database_url.get("schema", "")
    if parsed_database_url.get("scheme", "") == "sqlite3":
        schema = os.path.basename(parsed_database_url.get("path", ""))

    # Create docker-environment-vars.sh

    variables = {
        "database_database": schema,
        "database_host": parsed_database_url.get("host", ""),
        "database_password": parsed_database_url.get("password", ""),
        "database_port": parsed_database_url.get("port", ""),
        "database_protocol": parsed_database_url.get("protocol", ""),
        "database_username": parsed_database_url.get("username", ""),
        "docker_host_ip_addr": docker_host_ip_addr,
        "environment_updated": __updated__,
        "environment_version": __version__,
        "project_dir": project_dir,
        "project_name": project_name,
        "senzing_database_url": g2_database_url,
        "senzing_project_dir_suffix": "/g2",
        "sql_connection": sql_connection
    }

    filename = "{0}/docker-environment-vars.sh".format(output_directory)
    with open(filename, 'w') as file:
        logging.info(message_warning(165, filename))
        file.write(file_docker_environment_vars.__doc__.format(**variables))
    os.chmod(filename, 0o755)

    filename = "{0}/senzing-info.sh".format(output_directory)
    with open(filename, 'w') as file:
        logging.info(message_warning(165, filename))
        file.write(file_senzing_info.__doc__.format(**variables))
    os.chmod(filename, 0o755)


def project_create_setupenv_docker(config):

    # Pull configuration variables

    project_dir = config.get("project_dir")

    output_filename = "{0}/docker-setupEnv".format(project_dir)
    backup_filename = "{0}.{1}".format(output_filename, int(time.time()))

    # If output file exists, back it up.

    if os.path.exists(output_filename):
        logging.info(message_info(161, backup_filename, output_filename))
        shutil.move(output_filename, backup_filename)

    docstring = """#! /usr/bin/env bash

export SENZING_PROJECT_DIR={project_dir}

export SENZING_DATA_DIR=${{SENZING_PROJECT_DIR}}/data
export SENZING_DATA_VERSION_DIR=${{SENZING_PROJECT_DIR}}/data
export SENZING_ETC_DIR=${{SENZING_PROJECT_DIR}}/docker-etc
export SENZING_G2_DIR=${{SENZING_PROJECT_DIR}}
export SENZING_VAR_DIR=${{SENZING_PROJECT_DIR}}/var

export POSTGRES_DIR=${{SENZING_PROJECT_DIR}}/var/postgres
export RABBITMQ_DIR=${{SENZING_PROJECT_DIR}}/var/rabbitmq

mkdir -p  ${{SENZING_PROJECT_DIR}}/var/postgres
chmod 777 ${{SENZING_PROJECT_DIR}}/var/postgres

mkdir -p  ${{SENZING_PROJECT_DIR}}/var/rabbitmq
chmod 777 ${{SENZING_PROJECT_DIR}}/var/rabbitmq

""".format(project_dir=project_dir)

    logging.info(message_info(165, output_filename))
    with open(output_filename, "w") as text_file:
        text_file.write(docstring)

    os.chmod(output_filename, 0o755)


def project_create_var_log_directory(project_dir):

    # Specify output directory and backup directory.

    output_directory = "{0}/var/log".format(project_dir)
    backup_directory = "{0}.{1}".format(output_directory, int(time.time()))

    # If output directory exists, back it up.

    if os.path.exists(output_directory):
        logging.info(message_info(161, backup_directory, output_directory))
        shutil.move(output_directory, backup_directory)

    # Make .../docker-bin directory.

    try:
        os.makedirs(output_directory, exist_ok=True)
    except PermissionError as err:
        exit_error(702, output_directory, err)


def project_modify_G2Module_ini(project_dir):

    g2module_ini_for_docker = {
        "PIPELINE": {
            "CONFIGPATH": "/etc/opt/senzing",
            "LICENSEFILE": "/etc/opt/senzing/g2.lic",
            "RESOURCEPATH": "/opt/senzing/g2/resources",
            "SUPPORTPATH": "/opt/senzing/data",
        },
    }

    # Synthesize variables.

    filename = "{0}/docker-etc/G2Module.ini".format(project_dir)

    # Read G2Module.ini.

    config_parser = configparser.ConfigParser()
    config_parser.optionxform = str  # Maintain case of keys.
    config_parser.read(filename)

    #  Verify values.

    logging.info(message_info(102, filename))
    for section, options in g2module_ini_for_docker.items():
        for option, docker_value in options.items():
            try:
                value = config_parser.get(section, option)
                if value != docker_value:
                    config_parser[section][option] = docker_value
                    logging.info(message_info(103, section, option, value, docker_value))
                else:
                    logging.info(message_info(104, section, option, value))
            except:
                logging.info(message_info(105, section, option))

    # If needed, modify SQL.CONNECTION

    section = "SQL"
    option = "CONNECTION"
    try:
        old_database_url = config_parser.get(section, option)
        if old_database_url.find("sqlite") == 0:
            new_database_url = "sqlite3://na:na@/var/opt/senzing/sqlite/G2C.db"
            config_parser[section][option] = new_database_url
            logging.info(message_info(103, section, option, old_database_url, new_database_url))
    except:
        logging.info(message_info(105, section, option))

    # Remove SQL.G2CONFIGFILE option.

    config_parser.remove_option('SQL', 'G2CONFIGFILE')
    logging.info(message_info(106, 'SQL', 'G2CONFIGFILE'))

    # Write out contents.

    logging.info(message_info(119, filename, ""))
    with open(filename, 'w') as output_file:
        config_parser.write(output_file)

# -----------------------------------------------------------------------------
# do_* functions
#   Common function signature: do_XXX(args)
# -----------------------------------------------------------------------------


def do_add_docker_support_linux(args):
    ''' Do a task. '''

    # Get context from CLI, environment variables, and ini files.

    config = get_configuration(args)

    # Prolog.

    logging.info(entry_template(config))

    # Pull configuration variables.

    project_dir = config.get("project_dir")
    project_name = config.get("project_name")
    docker_host_ip_addr = config.get("docker_host_ip_addr")
    sql_connection = config.get("sql_connection")

    # Identify files to be created in <project>/docker-bin

    docker_bin_files = {
#        "docker-images-load.sh": file_docker_images_load,
#        "docker-images-save.sh": file_docker_images_save,
        "docker-pull-latest.sh": file_docker_pull_latest,
        "portainer.sh": file_portainer,
        "postgres.sh": file_postgres,
        "senzing-api-server.sh": file_senzing_api_server,
        "senzing-apt.sh": file_senzing_apt,
        "senzing-console.sh": file_senzing_console,
        "senzing-db2-driver-installer.sh": file_senzing_db2_driver_installer,
        "senzing-debug.sh": file_senzing_debug,
        "senzing-down.sh": file_senzing_down,
        "senzing-info.sh": file_senzing_info,
        "senzing-init-container.sh": file_senzing_init_container,
        "senzing-jupyter.sh": file_senzing_jupyter,
        "senzing-mssql-driver-installer.sh": file_senzing_mssql_driver_installer,
        "senzing-phppgadmin.sh": file_senzing_phppgadmin,
        "senzing-postgresql-init.sh": file_senzing_postgresql_init,
        "senzing-quickstart-demo.sh": file_senzing_quickstart_demo,
        "senzing-rabbitmq.sh": file_senzing_rabbitmq,
        "senzing-sqlite-web.sh": file_senzing_sqlite_web,
        "senzing-sshd.sh": file_senzing_sshd,
        "senzing-stream-loader.sh": file_senzing_stream_loader,
        "senzing-stream-producer.sh": file_senzing_stream_producer,
        "senzing-webapp-demo.sh": file_senzing_webapp_demo,
        "senzing-webapp.sh": file_senzing_webapp,
        "senzing-xterm.sh": file_senzing_xterm,
        "swagger-ui.sh": file_swagger_ui
    }

    # Do work.

    project_copy_etc(project_dir)
    project_modify_G2Module_ini(project_dir)
    project_create_setupenv_docker(config)
    project_create_docker_bin_directory(project_dir)
    project_create_var_log_directory(project_dir)
    project_create_docker_environment_vars(project_dir, project_name, docker_host_ip_addr, sql_connection)
    project_create_docker_bin_files(project_dir, docker_bin_files)

    # Epilog.

    logging.info(exit_template(config))


def do_add_docker_support_macos(args):
    ''' Do a task. '''

    # Get context from CLI, environment variables, and ini files.

    config = get_configuration(args)

    # Prolog.

    logging.info(entry_template(config))

    # Pull configuration variables.

    docker_host_ip_addr = config.get("docker_host_ip_addr")
    g2_database_url = config.get("g2_database_url")
    project_dir = config.get("project_dir")
    project_name = config.get("project_name")

    # Identify files to be created in <project>/docker-bin

    docker_bin_files = {
#        "docker-images-load.sh": file_docker_images_load,
#        "docker-images-save.sh": file_docker_images_save,
        "docker-pull-latest.sh": file_docker_pull_latest,
        "portainer.sh": file_portainer,
        "postgres.sh": file_postgres,
        "senzing-api-server.sh": file_senzing_api_server,
        "senzing-apt.sh": file_senzing_apt,
        "senzing-console.sh": file_senzing_console,
        "senzing-db2-driver-installer.sh": file_senzing_db2_driver_installer,
        "senzing-debug.sh": file_senzing_debug,
        "senzing-down.sh": file_senzing_down,
        "senzing-info.sh": file_senzing_info,
        "senzing-init-container.sh": file_senzing_init_container,
        "senzing-jupyter.sh": file_senzing_jupyter,
        "senzing-mssql-driver-installer.sh": file_senzing_mssql_driver_installer,
        "senzing-phppgadmin.sh": file_senzing_phppgadmin,
        "senzing-postgresql-init.sh": file_senzing_postgresql_init,
        "senzing-quickstart-demo.sh": file_senzing_quickstart_demo,
        "senzing-rabbitmq.sh": file_senzing_rabbitmq,
        "senzing-sqlite-web.sh": file_senzing_sqlite_web,
        "senzing-sshd.sh": file_senzing_sshd,
        "senzing-stream-loader.sh": file_senzing_stream_loader,
        "senzing-stream-producer.sh": file_senzing_stream_producer,
        "senzing-webapp-demo.sh": file_senzing_webapp_demo,
        "senzing-webapp.sh": file_senzing_webapp,
        "senzing-xterm.sh": file_senzing_xterm,
        "swagger-ui.sh": file_swagger_ui
    }

    # Do work.

    project_create_docker_bin_directory(project_dir)
    project_create_var_log_directory(project_dir)
    project_create_docker_environment_vars_macos(project_dir, project_name, docker_host_ip_addr, g2_database_url)
    project_create_docker_bin_files(project_dir, docker_bin_files)

    # Epilog.

    logging.info(exit_template(config))


def do_docker_acceptance_test(args):
    ''' For use with Docker acceptance testing. '''

    # Get context from CLI, environment variables, and ini files.

    config = get_configuration(args)

    # Prolog.

    logging.info(entry_template(config))

    # Epilog.

    logging.info(exit_template(config))


def do_docker_host(args):
    ''' Do a task. '''

    # Get context from CLI, environment variables, and ini files.

    config = get_configuration(args)

    # Prolog.

    logging.info(entry_template(config))

    # Do work.

    log_environment_variables()
    log_files()
    inspect_g2module_ini()

    # TODO:
    # Print contents of G2Module.ini

    logging.warning(message_warning(350))
    for report_warning in report_warnings:
        logging.warning(report_warning)

    # Epilog.

    logging.info(exit_template(config))


def do_sleep(args):
    ''' Sleep.  Used for debugging. '''

    # Get context from CLI, environment variables, and ini files.

    config = get_configuration(args)

    # Prolog.

    logging.info(entry_template(config))

    # Pull values from configuration.

    sleep_time_in_seconds = config.get('sleep_time_in_seconds')

    # Sleep

    if sleep_time_in_seconds > 0:
        logging.info(message_info(296, sleep_time_in_seconds))
        time.sleep(sleep_time_in_seconds)

    else:
        sleep_time_in_seconds = 3600
        while True:
            logging.info(message_info(295))
            time.sleep(sleep_time_in_seconds)

    # Epilog.

    logging.info(exit_template(config))


def do_version(args):
    ''' Log version information. '''

    logging.info(message_info(294, __version__, __updated__))

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------


if __name__ == "__main__":

    # Configure logging. See https://docs.python.org/2/library/logging.html#levels

    log_level_map = {
        "notset": logging.NOTSET,
        "debug": logging.DEBUG,
        "info": logging.INFO,
        "fatal": logging.FATAL,
        "warning": logging.WARNING,
        "error": logging.ERROR,
        "critical": logging.CRITICAL
    }

    log_level_parameter = os.getenv("SENZING_LOG_LEVEL", "info").lower()
    log_level = log_level_map.get(log_level_parameter, logging.INFO)
    logging.basicConfig(format=log_format, level=log_level)
    logging.debug(message_debug(998))

    # Trap signals temporarily until args are parsed.

    signal.signal(signal.SIGTERM, bootstrap_signal_handler)
    signal.signal(signal.SIGINT, bootstrap_signal_handler)

    # Parse the command line arguments.

    subcommand = os.getenv("SENZING_SUBCOMMAND", None)
    parser = get_parser()
    if len(sys.argv) > 1:
        args = parser.parse_args()
        subcommand = args.subcommand
    elif subcommand:
        args = argparse.Namespace(subcommand=subcommand)
    else:
        parser.print_help()
        if len(os.getenv("SENZING_DOCKER_LAUNCHED", "")):
            subcommand = "sleep"
            args = argparse.Namespace(subcommand=subcommand)
            do_sleep(args)
        exit_silently()

    # Catch interrupts. Tricky code: Uses currying.

    signal_handler = create_signal_handler_function(args)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # Transform subcommand from CLI parameter to function name string.

    subcommand_function_name = "do_{0}".format(subcommand.replace('-', '_'))

    # Test to see if function exists in the code.

    if subcommand_function_name not in globals():
        logging.warning(message_warning(696, subcommand))
        parser.print_help()
        exit_silently()

    # Tricky code for calling function based on string.

    globals()[subcommand_function_name](args)
